{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  if (value === Number(value).toString()) {\n    return Number(value);\n  }\n  if (value === '' || value === 'null') {\n    return null;\n  }\n  if (typeof value !== 'string') {\n    return value;\n  }\n  try {\n    return JSON.parse(decodeURIComponent(value));\n  } catch {\n    return value;\n  }\n}\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => \"-\".concat(chr.toLowerCase()));\n}\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(\"data-bs-\".concat(normalizeDataKey(key)), value);\n  },\n  removeDataAttribute(element, key) {\n    element.removeAttribute(\"data-bs-\".concat(normalizeDataKey(key)));\n  },\n  getDataAttributes(element) {\n    if (!element) {\n      return {};\n    }\n    const attributes = {};\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '');\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n      attributes[pureKey] = normalizeData(element.dataset[key]);\n    }\n    return attributes;\n  },\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(\"data-bs-\".concat(normalizeDataKey(key))));\n  }\n};\nexport default Manipulator;","map":{"version":3,"names":["normalizeData","value","Number","toString","JSON","parse","decodeURIComponent","normalizeDataKey","key","replace","chr","concat","toLowerCase","Manipulator","setDataAttribute","element","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","attributes","bsKeys","Object","keys","dataset","filter","startsWith","pureKey","charAt","slice","length","getDataAttribute","getAttribute"],"sources":["/Users/matteofranchini/Documents/GitHub/piattaforma_tutoraggio/client/node_modules/bootstrap/js/src/dom/manipulator.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAaA,CAACC,KAAK,EAAE;EAC5B,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpB,OAAO,IAAI;EACb;EAEA,IAAIA,KAAK,KAAK,OAAO,EAAE;IACrB,OAAO,KAAK;EACd;EAEA,IAAIA,KAAK,KAAKC,MAAM,CAACD,KAAK,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE;IACtC,OAAOD,MAAM,CAACD,KAAK,CAAC;EACtB;EAEA,IAAIA,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpC,OAAO,IAAI;EACb;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EAEA,IAAI;IACF,OAAOG,IAAI,CAACC,KAAK,CAACC,kBAAkB,CAACL,KAAK,CAAC,CAAC;EAC9C,CAAC,CAAC,MAAM;IACN,OAAOA,KAAK;EACd;AACF;AAEA,SAASM,gBAAgBA,CAACC,GAAG,EAAE;EAC7B,OAAOA,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAEC,GAAG,QAAAC,MAAA,CAAQD,GAAG,CAACE,WAAW,CAAC,CAAC,CAAE,CAAC;AAC9D;AAEA,MAAMC,WAAW,GAAG;EAClBC,gBAAgBA,CAACC,OAAO,EAAEP,GAAG,EAAEP,KAAK,EAAE;IACpCc,OAAO,CAACC,YAAY,YAAAL,MAAA,CAAYJ,gBAAgB,CAACC,GAAG,CAAC,GAAIP,KAAK,CAAC;EACjE,CAAC;EAEDgB,mBAAmBA,CAACF,OAAO,EAAEP,GAAG,EAAE;IAChCO,OAAO,CAACG,eAAe,YAAAP,MAAA,CAAYJ,gBAAgB,CAACC,GAAG,CAAC,CAAE,CAAC;EAC7D,CAAC;EAEDW,iBAAiBA,CAACJ,OAAO,EAAE;IACzB,IAAI,CAACA,OAAO,EAAE;MACZ,OAAO,CAAC,CAAC;IACX;IAEA,MAAMK,UAAU,GAAG,CAAC,CAAC;IACrB,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACR,OAAO,CAACS,OAAO,CAAC,CAACC,MAAM,CAACjB,GAAG,IAAIA,GAAG,CAACkB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAClB,GAAG,CAACkB,UAAU,CAAC,UAAU,CAAC,CAAC;IAE9G,KAAK,MAAMlB,GAAG,IAAIa,MAAM,EAAE;MACxB,IAAIM,OAAO,GAAGnB,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MACpCkB,OAAO,GAAGA,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,CAAChB,WAAW,CAAC,CAAC,GAAGe,OAAO,CAACE,KAAK,CAAC,CAAC,EAAEF,OAAO,CAACG,MAAM,CAAC;MAC5EV,UAAU,CAACO,OAAO,CAAC,GAAG3B,aAAa,CAACe,OAAO,CAACS,OAAO,CAAChB,GAAG,CAAC,CAAC;IAC3D;IAEA,OAAOY,UAAU;EACnB,CAAC;EAEDW,gBAAgBA,CAAChB,OAAO,EAAEP,GAAG,EAAE;IAC7B,OAAOR,aAAa,CAACe,OAAO,CAACiB,YAAY,YAAArB,MAAA,CAAYJ,gBAAgB,CAACC,GAAG,CAAC,CAAE,CAAC,CAAC;EAChF;AACF,CAAC;AAED,eAAeK,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}